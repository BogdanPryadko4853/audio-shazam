name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # Вариант 1: Использование системного Maven
    - name: Run tests with containers
      run: mvn -B verify --file pom.xml
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/test_db
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_password
        SPRING_DATA_REDIS_HOST: localhost

    # Вариант 2: Использование Maven Wrapper 
    # - name: Setup Maven Wrapper
    #   run: mvn wrapper:wrapper
    #
    # - name: Run tests with containers
    #   run: ./mvnw verify
    #   env:
    #     SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/test_db
    #     SPRING_DATASOURCE_USERNAME: test_user
    #     SPRING_DATASOURCE_PASSWORD: test_password
    #     SPRING_DATA_REDIS_HOST: localhost

    - name: Build Docker image
      run: docker build -t audio-metadata-service .