version: '3.8'

services:

  logstash:
    image: logstash:8.6.0
    ports:
      - "5044:5044" # для Filebeat (если будете использовать)
      - "5000:5000/tcp" # для прямого TCP-ввода от приложений
      - "5000:5000/udp" # для UDP
    environment:
      - LS_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - ./logstash-config:/usr/share/logstash/pipeline/
    depends_on:
      - elasticsearch
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9600/" ]
      interval: 10s
      timeout: 5s
      retries: 10

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URI=http://config-service:8888
    depends_on:
      - config-service
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761/actuator/health && curl -f http://localhost:8761/eureka/apps || exit 1" ]
      interval: 10s
      timeout: 20s
      retries: 15
      start_period: 30s

  service-registry:
    build:
      context: ./service-registry
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URI=http://config-service:8888
    depends_on:
      - config-service
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761/actuator/health && curl -f http://localhost:8761/eureka/apps || exit 1" ]
      interval: 10s
      timeout: 20s
      retries: 15
      start_period: 30s

  config-service:
    build:
      context: ./config-service
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=native
    volumes:
      - ./config-server/src/main/resources/configs:/app/configs:ro
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8888/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3

  audio-ingestion-service:
    build:
      context: ./audio-ingestion-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - CONFIG_SERVER_URI=http://config-service:8888
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=audio-bucket
      - METADATA_SERVICE_URL=http://metadata-service:8010/api/v1
    depends_on:
      - config-service
      - kafka
      - minio
      - metadata-service
      - service-registry
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3

  metadata-service:
    build:
      context: ./audio-metadata-service
      dockerfile: Dockerfile
    ports:
      - "8010:8010"
    environment:
      - CONFIG_SERVER_URI=http://config-service:8888
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/audio_metadata
      - SPRING_DATASOURCE_USERNAME=audio_admin
      - SPRING_DATASOURCE_PASSWORD=securepass
      - SPRING_DATA_REDIS_HOST=redis
      - MINIO_URL=http://minio:9000
    depends_on:
      - config-service
      - service-registry
      - db
      - redis
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8010/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3


  fingerprint-service:
    build:
      context: ./audio-fingerprint-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - CONFIG_SERVER_URI=http://config-service:8888
      - SPRING_PROFILES_ACTIVE=docker
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
      - LOG_LEVEL=INFO
    depends_on:
      - config-service
      - service-registry
      - kafka
      - minio
      - elasticsearch
      - logstash

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST="0.0.0.0"
    depends_on:
      - elasticsearch
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 10

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=audio_metadata
      - POSTGRES_USER=audio_admin
      - POSTGRES_PASSWORD=securepass
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U audio_admin -d audio_metadata" ]
      interval: 5s
      timeout: 5s
      retries: 10


  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - minio_data:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: [ "CMD-SHELL", "echo stat | nc 127.0.0.1 2181 | grep Mode" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list" ]
      interval: 5s
      timeout: 5s
      retries: 10

  elasticsearch:
    image: elasticsearch:8.6.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data

volumes:
  esdata:
    driver: local
  redis_data:
  minio_data:
  kafka_data: