version: '3.8'

services:

  audio-ingestion-service:
    build:
      context: ./audio-ingestion-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=audio-bucket
      - METADATA_SERVICE_URL=http://metadata-service:8010/api/v1
    depends_on:
      - kafka
      - minio
      - metadata-service
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3

  metadata-service:
    build:
      context: ./audio-metadata-service
      dockerfile: Dockerfile
    ports:
      - "8010:8010"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/audio_metadata
      - SPRING_DATASOURCE_USERNAME=audio_admin
      - SPRING_DATASOURCE_PASSWORD=securepass
      - SPRING_DATA_REDIS_HOST=redis
      - MINIO_URL=http://minio:9000
    depends_on:
      - db
      - redis
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8010/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3

  fingerprint-service:
    build:
      context:  ./audio-fingerprint-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - ELASTICSEARCH_URL=elasticsearch:9200
    depends_on:
      - kafka
      - minio
      - elasticsearch
  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=audio_metadata
      - POSTGRES_USER=audio_admin
      - POSTGRES_PASSWORD=securepass
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U audio_admin -d audio_metadata" ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Storage service
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  # Message broker services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list" ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - kafka_data:/var/lib/kafka/data

  # Search service
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1

volumes:
  postgres_data:
  redis_data:
  minio_data:
  kafka_data: